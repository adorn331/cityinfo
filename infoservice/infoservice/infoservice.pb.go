// todo add more comment

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.1
// source: infoservice.proto

package infoservice

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Province struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Province) Reset() {
	*x = Province{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Province) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Province) ProtoMessage() {}

func (x *Province) ProtoReflect() protoreflect.Message {
	mi := &file_infoservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Province.ProtoReflect.Descriptor instead.
func (*Province) Descriptor() ([]byte, []int) {
	return file_infoservice_proto_rawDescGZIP(), []int{0}
}

func (x *Province) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Province) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type City struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Province *Province `protobuf:"bytes,3,opt,name=province,proto3" json:"province,omitempty"`
}

func (x *City) Reset() {
	*x = City{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *City) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*City) ProtoMessage() {}

func (x *City) ProtoReflect() protoreflect.Message {
	mi := &file_infoservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use City.ProtoReflect.Descriptor instead.
func (*City) Descriptor() ([]byte, []int) {
	return file_infoservice_proto_rawDescGZIP(), []int{1}
}

func (x *City) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *City) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *City) GetProvince() *Province {
	if x != nil {
		return x.Province
	}
	return nil
}

type OptionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *OptionResult) Reset() {
	*x = OptionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionResult) ProtoMessage() {}

func (x *OptionResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionResult.ProtoReflect.Descriptor instead.
func (*OptionResult) Descriptor() ([]byte, []int) {
	return file_infoservice_proto_rawDescGZIP(), []int{2}
}

func (x *OptionResult) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OptionResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type FetchCitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvinceId int32 `protobuf:"varint,1,opt,name=provinceId,proto3" json:"provinceId,omitempty"`
}

func (x *FetchCitiesRequest) Reset() {
	*x = FetchCitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCitiesRequest) ProtoMessage() {}

func (x *FetchCitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infoservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCitiesRequest.ProtoReflect.Descriptor instead.
func (*FetchCitiesRequest) Descriptor() ([]byte, []int) {
	return file_infoservice_proto_rawDescGZIP(), []int{3}
}

func (x *FetchCitiesRequest) GetProvinceId() int32 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

type FetchCitiesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cities []*City `protobuf:"bytes,1,rep,name=cities,proto3" json:"cities,omitempty"`
}

func (x *FetchCitiesReply) Reset() {
	*x = FetchCitiesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCitiesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCitiesReply) ProtoMessage() {}

func (x *FetchCitiesReply) ProtoReflect() protoreflect.Message {
	mi := &file_infoservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCitiesReply.ProtoReflect.Descriptor instead.
func (*FetchCitiesReply) Descriptor() ([]byte, []int) {
	return file_infoservice_proto_rawDescGZIP(), []int{4}
}

func (x *FetchCitiesReply) GetCities() []*City {
	if x != nil {
		return x.Cities
	}
	return nil
}

type AddCitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cities []*City `protobuf:"bytes,1,rep,name=cities,proto3" json:"cities,omitempty"`
}

func (x *AddCitiesRequest) Reset() {
	*x = AddCitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCitiesRequest) ProtoMessage() {}

func (x *AddCitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infoservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCitiesRequest.ProtoReflect.Descriptor instead.
func (*AddCitiesRequest) Descriptor() ([]byte, []int) {
	return file_infoservice_proto_rawDescGZIP(), []int{5}
}

func (x *AddCitiesRequest) GetCities() []*City {
	if x != nil {
		return x.Cities
	}
	return nil
}

type AddCitiesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*OptionResult `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *AddCitiesReply) Reset() {
	*x = AddCitiesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCitiesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCitiesReply) ProtoMessage() {}

func (x *AddCitiesReply) ProtoReflect() protoreflect.Message {
	mi := &file_infoservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCitiesReply.ProtoReflect.Descriptor instead.
func (*AddCitiesReply) Descriptor() ([]byte, []int) {
	return file_infoservice_proto_rawDescGZIP(), []int{6}
}

func (x *AddCitiesReply) GetResult() []*OptionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// batch delete city by city ids
type DelCitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityIds []int32 `protobuf:"varint,1,rep,packed,name=cityIds,proto3" json:"cityIds,omitempty"`
}

func (x *DelCitiesRequest) Reset() {
	*x = DelCitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCitiesRequest) ProtoMessage() {}

func (x *DelCitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infoservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCitiesRequest.ProtoReflect.Descriptor instead.
func (*DelCitiesRequest) Descriptor() ([]byte, []int) {
	return file_infoservice_proto_rawDescGZIP(), []int{7}
}

func (x *DelCitiesRequest) GetCityIds() []int32 {
	if x != nil {
		return x.CityIds
	}
	return nil
}

type DelCitiesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// todo add deleted field to indicate the amount of items deleted successfully
	Result []*OptionResult `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *DelCitiesReply) Reset() {
	*x = DelCitiesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCitiesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCitiesReply) ProtoMessage() {}

func (x *DelCitiesReply) ProtoReflect() protoreflect.Message {
	mi := &file_infoservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCitiesReply.ProtoReflect.Descriptor instead.
func (*DelCitiesReply) Descriptor() ([]byte, []int) {
	return file_infoservice_proto_rawDescGZIP(), []int{8}
}

func (x *DelCitiesReply) GetResult() []*OptionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// batch delete city by province
type DelProvinceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvinceId int32 `protobuf:"varint,1,opt,name=provinceId,proto3" json:"provinceId,omitempty"`
}

func (x *DelProvinceRequest) Reset() {
	*x = DelProvinceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelProvinceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelProvinceRequest) ProtoMessage() {}

func (x *DelProvinceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infoservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelProvinceRequest.ProtoReflect.Descriptor instead.
func (*DelProvinceRequest) Descriptor() ([]byte, []int) {
	return file_infoservice_proto_rawDescGZIP(), []int{9}
}

func (x *DelProvinceRequest) GetProvinceId() int32 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

type DelProvinceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *OptionResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelProvinceReply) Reset() {
	*x = DelProvinceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelProvinceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelProvinceReply) ProtoMessage() {}

func (x *DelProvinceReply) ProtoReflect() protoreflect.Message {
	mi := &file_infoservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelProvinceReply.ProtoReflect.Descriptor instead.
func (*DelProvinceReply) Descriptor() ([]byte, []int) {
	return file_infoservice_proto_rawDescGZIP(), []int{10}
}

func (x *DelProvinceReply) GetResult() *OptionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_infoservice_proto protoreflect.FileDescriptor

var file_infoservice_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x2e, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x5d, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x22,
	0x38, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x34, 0x0a, 0x12, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x3d, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x06, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x3d,
	0x0a, 0x10, 0x41, 0x64, 0x64, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x06, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x43, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x2c, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73,
	0x22, 0x43, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x34, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x32, 0xc5, 0x02, 0x0a, 0x0b, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_infoservice_proto_rawDescOnce sync.Once
	file_infoservice_proto_rawDescData = file_infoservice_proto_rawDesc
)

func file_infoservice_proto_rawDescGZIP() []byte {
	file_infoservice_proto_rawDescOnce.Do(func() {
		file_infoservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_infoservice_proto_rawDescData)
	})
	return file_infoservice_proto_rawDescData
}

var file_infoservice_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_infoservice_proto_goTypes = []interface{}{
	(*Province)(nil),           // 0: infoservice.Province
	(*City)(nil),               // 1: infoservice.City
	(*OptionResult)(nil),       // 2: infoservice.OptionResult
	(*FetchCitiesRequest)(nil), // 3: infoservice.FetchCitiesRequest
	(*FetchCitiesReply)(nil),   // 4: infoservice.FetchCitiesReply
	(*AddCitiesRequest)(nil),   // 5: infoservice.AddCitiesRequest
	(*AddCitiesReply)(nil),     // 6: infoservice.AddCitiesReply
	(*DelCitiesRequest)(nil),   // 7: infoservice.DelCitiesRequest
	(*DelCitiesReply)(nil),     // 8: infoservice.DelCitiesReply
	(*DelProvinceRequest)(nil), // 9: infoservice.DelProvinceRequest
	(*DelProvinceReply)(nil),   // 10: infoservice.DelProvinceReply
}
var file_infoservice_proto_depIdxs = []int32{
	0,  // 0: infoservice.City.province:type_name -> infoservice.Province
	1,  // 1: infoservice.FetchCitiesReply.cities:type_name -> infoservice.City
	1,  // 2: infoservice.AddCitiesRequest.cities:type_name -> infoservice.City
	2,  // 3: infoservice.AddCitiesReply.result:type_name -> infoservice.OptionResult
	2,  // 4: infoservice.DelCitiesReply.result:type_name -> infoservice.OptionResult
	2,  // 5: infoservice.DelProvinceReply.result:type_name -> infoservice.OptionResult
	3,  // 6: infoservice.CityManager.FetchCities:input_type -> infoservice.FetchCitiesRequest
	5,  // 7: infoservice.CityManager.AddCities:input_type -> infoservice.AddCitiesRequest
	7,  // 8: infoservice.CityManager.DelCities:input_type -> infoservice.DelCitiesRequest
	9,  // 9: infoservice.CityManager.DelProvince:input_type -> infoservice.DelProvinceRequest
	4,  // 10: infoservice.CityManager.FetchCities:output_type -> infoservice.FetchCitiesReply
	6,  // 11: infoservice.CityManager.AddCities:output_type -> infoservice.AddCitiesReply
	8,  // 12: infoservice.CityManager.DelCities:output_type -> infoservice.DelCitiesReply
	10, // 13: infoservice.CityManager.DelProvince:output_type -> infoservice.DelProvinceReply
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_infoservice_proto_init() }
func file_infoservice_proto_init() {
	if File_infoservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infoservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Province); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*City); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCitiesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCitiesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCitiesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelProvinceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelProvinceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infoservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infoservice_proto_goTypes,
		DependencyIndexes: file_infoservice_proto_depIdxs,
		MessageInfos:      file_infoservice_proto_msgTypes,
	}.Build()
	File_infoservice_proto = out.File
	file_infoservice_proto_rawDesc = nil
	file_infoservice_proto_goTypes = nil
	file_infoservice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CityManagerClient is the client API for CityManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CityManagerClient interface {
	FetchCities(ctx context.Context, in *FetchCitiesRequest, opts ...grpc.CallOption) (*FetchCitiesReply, error)
	AddCities(ctx context.Context, in *AddCitiesRequest, opts ...grpc.CallOption) (*AddCitiesReply, error)
	DelCities(ctx context.Context, in *DelCitiesRequest, opts ...grpc.CallOption) (*DelCitiesReply, error)
	DelProvince(ctx context.Context, in *DelProvinceRequest, opts ...grpc.CallOption) (*DelProvinceReply, error)
}

type cityManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewCityManagerClient(cc grpc.ClientConnInterface) CityManagerClient {
	return &cityManagerClient{cc}
}

func (c *cityManagerClient) FetchCities(ctx context.Context, in *FetchCitiesRequest, opts ...grpc.CallOption) (*FetchCitiesReply, error) {
	out := new(FetchCitiesReply)
	err := c.cc.Invoke(ctx, "/infoservice.CityManager/FetchCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityManagerClient) AddCities(ctx context.Context, in *AddCitiesRequest, opts ...grpc.CallOption) (*AddCitiesReply, error) {
	out := new(AddCitiesReply)
	err := c.cc.Invoke(ctx, "/infoservice.CityManager/AddCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityManagerClient) DelCities(ctx context.Context, in *DelCitiesRequest, opts ...grpc.CallOption) (*DelCitiesReply, error) {
	out := new(DelCitiesReply)
	err := c.cc.Invoke(ctx, "/infoservice.CityManager/DelCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityManagerClient) DelProvince(ctx context.Context, in *DelProvinceRequest, opts ...grpc.CallOption) (*DelProvinceReply, error) {
	out := new(DelProvinceReply)
	err := c.cc.Invoke(ctx, "/infoservice.CityManager/DelProvince", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CityManagerServer is the server API for CityManager service.
type CityManagerServer interface {
	FetchCities(context.Context, *FetchCitiesRequest) (*FetchCitiesReply, error)
	AddCities(context.Context, *AddCitiesRequest) (*AddCitiesReply, error)
	DelCities(context.Context, *DelCitiesRequest) (*DelCitiesReply, error)
	DelProvince(context.Context, *DelProvinceRequest) (*DelProvinceReply, error)
}

// UnimplementedCityManagerServer can be embedded to have forward compatible implementations.
type UnimplementedCityManagerServer struct {
}

func (*UnimplementedCityManagerServer) FetchCities(context.Context, *FetchCitiesRequest) (*FetchCitiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCities not implemented")
}
func (*UnimplementedCityManagerServer) AddCities(context.Context, *AddCitiesRequest) (*AddCitiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCities not implemented")
}
func (*UnimplementedCityManagerServer) DelCities(context.Context, *DelCitiesRequest) (*DelCitiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCities not implemented")
}
func (*UnimplementedCityManagerServer) DelProvince(context.Context, *DelProvinceRequest) (*DelProvinceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelProvince not implemented")
}

func RegisterCityManagerServer(s *grpc.Server, srv CityManagerServer) {
	s.RegisterService(&_CityManager_serviceDesc, srv)
}

func _CityManager_FetchCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityManagerServer).FetchCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoservice.CityManager/FetchCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityManagerServer).FetchCities(ctx, req.(*FetchCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityManager_AddCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityManagerServer).AddCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoservice.CityManager/AddCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityManagerServer).AddCities(ctx, req.(*AddCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityManager_DelCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityManagerServer).DelCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoservice.CityManager/DelCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityManagerServer).DelCities(ctx, req.(*DelCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityManager_DelProvince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelProvinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityManagerServer).DelProvince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoservice.CityManager/DelProvince",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityManagerServer).DelProvince(ctx, req.(*DelProvinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CityManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infoservice.CityManager",
	HandlerType: (*CityManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchCities",
			Handler:    _CityManager_FetchCities_Handler,
		},
		{
			MethodName: "AddCities",
			Handler:    _CityManager_AddCities_Handler,
		},
		{
			MethodName: "DelCities",
			Handler:    _CityManager_DelCities_Handler,
		},
		{
			MethodName: "DelProvince",
			Handler:    _CityManager_DelProvince_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infoservice.proto",
}
